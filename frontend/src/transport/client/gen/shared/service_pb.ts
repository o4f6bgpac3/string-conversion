// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file shared/service.proto (package shared, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Conversion } from "./domain_pb.js";

/**
 * @generated from message shared.GetConversionRequest
 */
export class GetConversionRequest extends Message<GetConversionRequest> {
  /**
   * @generated from field: string input = 1;
   */
  input = "";

  /**
   * @generated from field: repeated string formats = 2;
   */
  formats: string[] = [];

  constructor(data?: PartialMessage<GetConversionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shared.GetConversionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "formats", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConversionRequest {
    return new GetConversionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConversionRequest {
    return new GetConversionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConversionRequest {
    return new GetConversionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConversionRequest | PlainMessage<GetConversionRequest> | undefined, b: GetConversionRequest | PlainMessage<GetConversionRequest> | undefined): boolean {
    return proto3.util.equals(GetConversionRequest, a, b);
  }
}

/**
 * @generated from message shared.GetConversionResponse
 */
export class GetConversionResponse extends Message<GetConversionResponse> {
  /**
   * @generated from field: shared.Conversion conversion = 1;
   */
  conversion?: Conversion;

  constructor(data?: PartialMessage<GetConversionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shared.GetConversionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conversion", kind: "message", T: Conversion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConversionResponse {
    return new GetConversionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConversionResponse {
    return new GetConversionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConversionResponse {
    return new GetConversionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConversionResponse | PlainMessage<GetConversionResponse> | undefined, b: GetConversionResponse | PlainMessage<GetConversionResponse> | undefined): boolean {
    return proto3.util.equals(GetConversionResponse, a, b);
  }
}

