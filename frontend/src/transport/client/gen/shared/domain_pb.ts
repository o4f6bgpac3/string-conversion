// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file shared/domain.proto (package shared, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message shared.Conversion
 */
export class Conversion extends Message<Conversion> {
  /**
   * @generated from field: string input = 1;
   */
  input = "";

  /**
   * @generated from field: repeated shared.Conversion.Format formats = 2;
   */
  formats: Conversion_Format[] = [];

  constructor(data?: PartialMessage<Conversion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shared.Conversion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "input", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "formats", kind: "message", T: Conversion_Format, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Conversion {
    return new Conversion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Conversion {
    return new Conversion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Conversion {
    return new Conversion().fromJsonString(jsonString, options);
  }

  static equals(a: Conversion | PlainMessage<Conversion> | undefined, b: Conversion | PlainMessage<Conversion> | undefined): boolean {
    return proto3.util.equals(Conversion, a, b);
  }
}

/**
 * @generated from message shared.Conversion.Format
 */
export class Conversion_Format extends Message<Conversion_Format> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Conversion_Format>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "shared.Conversion.Format";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Conversion_Format {
    return new Conversion_Format().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Conversion_Format {
    return new Conversion_Format().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Conversion_Format {
    return new Conversion_Format().fromJsonString(jsonString, options);
  }

  static equals(a: Conversion_Format | PlainMessage<Conversion_Format> | undefined, b: Conversion_Format | PlainMessage<Conversion_Format> | undefined): boolean {
    return proto3.util.equals(Conversion_Format, a, b);
  }
}

