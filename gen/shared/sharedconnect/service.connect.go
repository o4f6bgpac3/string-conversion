// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: shared/service.proto

package sharedconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	shared "github.com/o4f6bgpac3/string-conversion/gen/shared"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StringConversionServiceName is the fully-qualified name of the StringConversionService service.
	StringConversionServiceName = "shared.StringConversionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StringConversionServiceGetConversionProcedure is the fully-qualified name of the
	// StringConversionService's GetConversion RPC.
	StringConversionServiceGetConversionProcedure = "/shared.StringConversionService/GetConversion"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	stringConversionServiceServiceDescriptor             = shared.File_shared_service_proto.Services().ByName("StringConversionService")
	stringConversionServiceGetConversionMethodDescriptor = stringConversionServiceServiceDescriptor.Methods().ByName("GetConversion")
)

// StringConversionServiceClient is a client for the shared.StringConversionService service.
type StringConversionServiceClient interface {
	GetConversion(context.Context, *connect.Request[shared.GetConversionRequest]) (*connect.Response[shared.GetConversionResponse], error)
}

// NewStringConversionServiceClient constructs a client for the shared.StringConversionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStringConversionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StringConversionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &stringConversionServiceClient{
		getConversion: connect.NewClient[shared.GetConversionRequest, shared.GetConversionResponse](
			httpClient,
			baseURL+StringConversionServiceGetConversionProcedure,
			connect.WithSchema(stringConversionServiceGetConversionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// stringConversionServiceClient implements StringConversionServiceClient.
type stringConversionServiceClient struct {
	getConversion *connect.Client[shared.GetConversionRequest, shared.GetConversionResponse]
}

// GetConversion calls shared.StringConversionService.GetConversion.
func (c *stringConversionServiceClient) GetConversion(ctx context.Context, req *connect.Request[shared.GetConversionRequest]) (*connect.Response[shared.GetConversionResponse], error) {
	return c.getConversion.CallUnary(ctx, req)
}

// StringConversionServiceHandler is an implementation of the shared.StringConversionService
// service.
type StringConversionServiceHandler interface {
	GetConversion(context.Context, *connect.Request[shared.GetConversionRequest]) (*connect.Response[shared.GetConversionResponse], error)
}

// NewStringConversionServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStringConversionServiceHandler(svc StringConversionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stringConversionServiceGetConversionHandler := connect.NewUnaryHandler(
		StringConversionServiceGetConversionProcedure,
		svc.GetConversion,
		connect.WithSchema(stringConversionServiceGetConversionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/shared.StringConversionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StringConversionServiceGetConversionProcedure:
			stringConversionServiceGetConversionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStringConversionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStringConversionServiceHandler struct{}

func (UnimplementedStringConversionServiceHandler) GetConversion(context.Context, *connect.Request[shared.GetConversionRequest]) (*connect.Response[shared.GetConversionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("shared.StringConversionService.GetConversion is not implemented"))
}
